{"ast":null,"code":"import { getValue } from \"../helpers\";\nimport { addListenerFor } from \"./listeners\";\nvar Transporter = getValue(\"simcapi.Transporter\", window);\nvar VIEWER = \"VIEWER\";\nvar AUTHOR = \"AUTHOR\";\n\nvar setBooleanIn = function setBooleanIn(capiModel) {\n  return function (_ref) {\n    var key = _ref.key,\n        value = _ref.to;\n    capiModel.set(key, value);\n  };\n};\n\nvar toggleContext = function toggleContext(capiModel) {\n  return function () {\n    console.log(Transporter);\n\n    if (Transporter) {\n      capiModel.set(\"simContext\", Transporter.getConfig().context);\n    }\n\n    console.log(\"Toggle Context\");\n\n    switch (capiModel.get(\"simContext\")) {\n      case VIEWER:\n        setBooleanIn(capiModel)({\n          to: true,\n          key: \"studentMode\"\n        });\n        setBooleanIn(capiModel)({\n          to: false,\n          key: \"authorMode\"\n        });\n        setBooleanIn(capiModel)({\n          to: false,\n          key: \"reviewMode\"\n        });\n        break;\n\n      case AUTHOR:\n        setBooleanIn(capiModel)({\n          to: true,\n          key: \"authorMode\"\n        });\n        setBooleanIn(capiModel)({\n          to: false,\n          key: \"studentMode\"\n        });\n        setBooleanIn(capiModel)({\n          to: false,\n          key: \"reviewMode\"\n        });\n        break;\n\n      default:\n        console.log(\"Unsupported context received\");\n    }\n  };\n};\n\nexport var bindEvents = function bindEvents(capiModel) {\n  addListenerFor({\n    key: \"toggleContext\",\n    action: toggleContext(capiModel),\n    capiModel: capiModel\n  });\n};","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/group21WildLifeRefuge/src/utils/CAPI/events.js"],"names":["getValue","addListenerFor","Transporter","window","VIEWER","AUTHOR","setBooleanIn","capiModel","key","value","to","set","toggleContext","console","log","getConfig","context","get","bindEvents","action"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,IAAMC,WAAW,GAAGF,QAAQ,CAAC,qBAAD,EAAwBG,MAAxB,CAA5B;AAEA,IAAMC,MAAM,GAAG,QAAf;AACA,IAAMC,MAAM,GAAG,QAAf;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,SAAS;AAAA,SAAI,gBAAwB;AAAA,QAArBC,GAAqB,QAArBA,GAAqB;AAAA,QAAZC,KAAY,QAAhBC,EAAgB;AACxDH,IAAAA,SAAS,CAACI,GAAV,CAAcH,GAAd,EAAmBC,KAAnB;AACD,GAF6B;AAAA,CAA9B;;AAIA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAL,SAAS;AAAA,SAAI,YAAM;AACvCM,IAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAZ;;AACA,QAAIA,WAAJ,EAAiB;AACfK,MAAAA,SAAS,CAACI,GAAV,CAAc,YAAd,EAA4BT,WAAW,CAACa,SAAZ,GAAwBC,OAApD;AACD;;AAEDH,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAEA,YAAQP,SAAS,CAACU,GAAV,CAAc,YAAd,CAAR;AACE,WAAKb,MAAL;AACEE,QAAAA,YAAY,CAACC,SAAD,CAAZ,CAAwB;AAAEG,UAAAA,EAAE,EAAE,IAAN;AAAYF,UAAAA,GAAG,EAAE;AAAjB,SAAxB;AACAF,QAAAA,YAAY,CAACC,SAAD,CAAZ,CAAwB;AAAEG,UAAAA,EAAE,EAAE,KAAN;AAAaF,UAAAA,GAAG,EAAE;AAAlB,SAAxB;AACAF,QAAAA,YAAY,CAACC,SAAD,CAAZ,CAAwB;AAAEG,UAAAA,EAAE,EAAE,KAAN;AAAaF,UAAAA,GAAG,EAAE;AAAlB,SAAxB;AACA;;AACF,WAAKH,MAAL;AACEC,QAAAA,YAAY,CAACC,SAAD,CAAZ,CAAwB;AAAEG,UAAAA,EAAE,EAAE,IAAN;AAAYF,UAAAA,GAAG,EAAE;AAAjB,SAAxB;AACAF,QAAAA,YAAY,CAACC,SAAD,CAAZ,CAAwB;AAAEG,UAAAA,EAAE,EAAE,KAAN;AAAaF,UAAAA,GAAG,EAAE;AAAlB,SAAxB;AACAF,QAAAA,YAAY,CAACC,SAAD,CAAZ,CAAwB;AAAEG,UAAAA,EAAE,EAAE,KAAN;AAAaF,UAAAA,GAAG,EAAE;AAAlB,SAAxB;AACA;;AACF;AACEK,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAZJ;AAcD,GAtB8B;AAAA,CAA/B;;AAwBA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAAX,SAAS,EAAI;AACrCN,EAAAA,cAAc,CAAC;AACbO,IAAAA,GAAG,EAAE,eADQ;AAEbW,IAAAA,MAAM,EAAEP,aAAa,CAACL,SAAD,CAFR;AAGbA,IAAAA,SAAS,EAATA;AAHa,GAAD,CAAd;AAKD,CANM","sourcesContent":["import { getValue } from \"../helpers\";\nimport { addListenerFor } from \"./listeners\";\n\nconst Transporter = getValue(\"simcapi.Transporter\", window);\n\nconst VIEWER = \"VIEWER\";\nconst AUTHOR = \"AUTHOR\";\n\nconst setBooleanIn = capiModel => ({ key, to: value }) => {\n  capiModel.set(key, value);\n};\n\nconst toggleContext = capiModel => () => {\n  console.log(Transporter);\n  if (Transporter) {\n    capiModel.set(\"simContext\", Transporter.getConfig().context);\n  }\n\n  console.log(\"Toggle Context\");\n\n  switch (capiModel.get(\"simContext\")) {\n    case VIEWER:\n      setBooleanIn(capiModel)({ to: true, key: \"studentMode\" });\n      setBooleanIn(capiModel)({ to: false, key: \"authorMode\" });\n      setBooleanIn(capiModel)({ to: false, key: \"reviewMode\" });\n      break;\n    case AUTHOR:\n      setBooleanIn(capiModel)({ to: true, key: \"authorMode\" });\n      setBooleanIn(capiModel)({ to: false, key: \"studentMode\" });\n      setBooleanIn(capiModel)({ to: false, key: \"reviewMode\" });\n      break;\n    default:\n      console.log(\"Unsupported context received\");\n  }\n};\n\nexport const bindEvents = capiModel => {\n  addListenerFor({\n    key: \"toggleContext\",\n    action: toggleContext(capiModel),\n    capiModel\n  });\n};\n"]},"metadata":{},"sourceType":"module"}