{"ast":null,"code":"import _toConsumableArray from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"../js/three/OrbitControls\";\nimport Ground from \"./Ground\";\nimport GrassField from \"./GrassField\";\nimport AmbientLight from \"./AmbientLight\";\nimport DirectionalLight from \"./DirectionalLight\";\nimport { getValue } from \"../utils/helpers\";\nimport Hawk, { NAME as hawkName } from \"./Hawk\";\nimport { getCapiInstance } from \"../utils/CAPI/capi\";\nimport { FlyControls } from \"../js/three/FlyControls\";\n\nvar SceneManager =\n/*#__PURE__*/\nfunction () {\n  function SceneManager(canvas) {\n    var _this = this;\n\n    _classCallCheck(this, SceneManager);\n\n    this.groundSize = {\n      x: 1000,\n      y: 1000\n    };\n    this.camera = null;\n    this.scene = null;\n    this.renderer = null;\n    this.cameraControls = null;\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.clock = new THREE.Clock();\n    this.screenDimensions = {};\n    this.subjects = [];\n    this.selected = [];\n    this.intersected = null;\n    this.defaultCameraPosition = [-75, 40, 80];\n\n    this.checkIntersects = function () {\n      var intersects = _this.raycaster.intersectObjects(_this.scene.children, true) || [];\n\n      if (intersects.length > 0) {\n        if (_this.intersected !== intersects[0].object) {\n          _this.resetIntersectedColor(_this.intersected);\n\n          _this.intersected = getValue(\"object\", intersects[0]);\n          var selectable = getValue(\"userData.selectable\", _this.intersected);\n\n          if (selectable) {\n            var highlight = getValue(\"userData.color.highlight\", _this.intersected);\n            var color = getValue(\"material.color\", _this.intersected);\n            color.set && color.set(highlight);\n          }\n        }\n      } else {\n        _this.resetIntersectedColor(_this.intersected);\n\n        _this.intersected = null;\n      }\n    };\n\n    this.handleClick = function (event) {\n      var vector = _this.convertClickToVector(event);\n\n      _this.raycaster.set(_this.camera.position, vector);\n\n      var intersects = _this.raycaster.intersectObjects(_this.scene.children, true) || [];\n      var model = intersects[0] || {};\n      var isSelectable = !!getValue(\"object.userData.selectable\", model);\n\n      if (isSelectable) {\n        _this.toggleSelected(model.object);\n      }\n    };\n\n    this.convertClickToVector = function (event) {\n      var vector = new THREE.Vector3();\n\n      var canvasTopOffset = _this.canvas.getBoundingClientRect().top;\n\n      vector.x = event.clientX / _this.canvas.width * 2 - 1;\n      vector.y = -(event.clientY - canvasTopOffset) / _this.canvas.height * 2 + 1;\n      vector.unproject(_this.camera);\n      vector.sub(_this.camera.position);\n      vector.normalize();\n      return vector;\n    };\n\n    this.onDocumentMouseClick = function (event) {\n      _this.handleClick(event);\n    };\n\n    this.onDocumentMouseMove = function (event) {\n      var vector = _this.convertClickToVector(event);\n\n      _this.raycaster.set(_this.camera.position, vector);\n    };\n\n    this.setCanvas(canvas);\n    this.initializeScene();\n    this.initializeRenderer();\n    this.initializeCamera();\n    this.createSceneSubjects();\n  }\n\n  _createClass(SceneManager, [{\n    key: \"setCanvas\",\n    value: function setCanvas(canvas) {\n      var width = canvas.width,\n          height = canvas.height;\n      this.canvas = canvas;\n      this.screenDimensions = {\n        width: width,\n        height: height\n      };\n    }\n  }, {\n    key: \"resetCamera\",\n    value: function resetCamera() {\n      this.cameraControls.reset();\n    }\n  }, {\n    key: \"toggleSelected\",\n    value: function toggleSelected(model) {\n      var modelIndex = this.selected.findIndex(function (selectedModel) {\n        return model === selectedModel;\n      });\n\n      if (modelIndex >= 0) {\n        var modelToRemove = this.selected[modelIndex];\n        var originalColor = getValue(\"userData.color.original\", modelToRemove);\n        var color = getValue(\"material.color\", modelToRemove);\n        color.set && color.set(originalColor);\n\n        if (getValue(\"userData.name\") === hawkName) {\n          var capi = getCapiInstance();\n          var currentHawkCount = capi.getValue({\n            key: \"redtailHawkSelected\"\n          });\n          capi.setValue({\n            key: \"redtailHawkSelected\",\n            value: currentHawkCount - 1\n          });\n        }\n\n        this.selected.splice(modelIndex, 1);\n      } else {\n        var _color = getValue(\"material.color\", model);\n\n        var selectedColor = getValue(\"userData.color.selected\", model);\n        var name = getValue(\"userData.name\", model);\n        _color.set && _color.set(selectedColor);\n\n        if (name === hawkName) {\n          var _capi = getCapiInstance();\n\n          var _currentHawkCount = _capi.getValue({\n            key: \"redtailHawkSelected\"\n          });\n\n          _capi.setValue({\n            key: \"redtailHawkSelected\",\n            value: _currentHawkCount + 1\n          });\n        }\n\n        this.selected.push(model);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var delta = this.clock.getDelta();\n      var elapsedTime = this.clock.getElapsedTime();\n\n      for (var i = 0; i < this.subjects.length; i++) {\n        this.subjects[i].update && this.subjects[i].update(elapsedTime);\n      }\n\n      this.cameraControls.update(delta);\n      this.renderer.render(this.scene, this.camera);\n      this.checkIntersects();\n    }\n  }, {\n    key: \"resetIntersectedColor\",\n    value: function resetIntersectedColor(intersected) {\n      var selectableKey = \"userData.selectable\";\n\n      if (intersected && getValue(selectableKey, intersected)) {\n        var color = getValue(\"material.color\", intersected);\n        var isSelected = this.selected.findIndex(function (model) {\n          return model === intersected;\n        }) >= 0;\n\n        if (color.set) {\n          var colorKey = \"userData.color.\".concat(isSelected ? \"selected\" : \"original\");\n          color.set(getValue(colorKey, intersected));\n        }\n      }\n    }\n  }, {\n    key: \"createSceneSubjects\",\n    value: function createSceneSubjects() {\n      this.subjects = [new Ground(this.scene, {\n        size: this.groundSize,\n        color: \"#996600\"\n      }), new GrassField(this.scene, {\n        count: 500\n      }), new AmbientLight(this.scene), new DirectionalLight(this.scene)];\n    }\n  }, {\n    key: \"addObject\",\n    value: function addObject(sceneObject) {\n      this.subjects.push(sceneObject);\n    }\n  }, {\n    key: \"onTransporterReady\",\n    value: function onTransporterReady() {\n      var capi = getCapiInstance();\n      var hawkCount = capi.getValue({\n        key: \"redtailHawkCount\"\n      });\n\n      for (var hawks = 0; hawks < hawkCount; hawks++) {\n        this.addObject(new Hawk(this.scene));\n      }\n    }\n  }, {\n    key: \"onWindowResize\",\n    value: function onWindowResize() {\n      var _this$canvas = this.canvas,\n          width = _this$canvas.width,\n          height = _this$canvas.height;\n      this.screenDimensions.width = width;\n      this.screenDimensions.height = height;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(width, height);\n    }\n  }, {\n    key: \"initializeCamera\",\n    value: function initializeCamera() {\n      var _this$camera$position;\n\n      var _this$screenDimension = this.screenDimensions,\n          width = _this$screenDimension.width,\n          height = _this$screenDimension.height;\n      var fieldOfView = 60;\n      var aspectRatio = width / height;\n      var nearPlane = 1;\n      var farPlane = 1000;\n      this.camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\n      (_this$camera$position = this.camera.position).set.apply(_this$camera$position, _toConsumableArray(this.defaultCameraPosition));\n\n      this.cameraControls = new OrbitControls(this.camera);\n    }\n  }, {\n    key: \"setFlyControlCamera\",\n    value: function setFlyControlCamera() {\n      // position and point the camera to the center of the scene\n      this.camera.position.x = 100;\n      this.camera.position.y = 100;\n      this.camera.position.z = 300;\n      this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n      this.cameraControls = new FlyControls(this.camera);\n      this.cameraControls.movementSpeed = 25;\n      this.cameraControls.domElement = document.querySelector(\"#root\");\n      this.cameraControls.maxPolarAngle = Math.PI * 0.5;\n      this.cameraControls.rollSpeed = Math.PI / 24;\n      this.cameraControls.autoForward = true;\n      this.cameraControls.dragToLook = true;\n    }\n  }, {\n    key: \"setCameraPosition\",\n    value: function setCameraPosition(x, y, z) {\n      this.cameraControls = new OrbitControls(this.camera);\n      this.camera.position.x = x;\n      this.camera.position.y = y;\n      this.camera.position.z = z;\n    }\n  }, {\n    key: \"setDefaultCamera\",\n    value: function setDefaultCamera() {\n      var _this$camera$position2;\n\n      (_this$camera$position2 = this.camera.position).set.apply(_this$camera$position2, _toConsumableArray(this.defaultCameraPosition));\n    }\n  }, {\n    key: \"initializeScene\",\n    value: function initializeScene() {\n      this.scene = new THREE.Scene();\n      this.scene.background = new THREE.Color(\"#ffffff\");\n    }\n  }, {\n    key: \"initializeRenderer\",\n    value: function initializeRenderer() {\n      var _this$screenDimension2 = this.screenDimensions,\n          width = _this$screenDimension2.width,\n          height = _this$screenDimension2.height;\n      this.renderer = new THREE.WebGLRenderer({\n        canvas: this.canvas,\n        antialias: true\n      });\n      this.renderer.setPixelRatio(1);\n      this.renderer.setSize(width, height);\n    }\n  }]);\n\n  return SceneManager;\n}();\n\nexport var getSceneManager = function getSceneManager() {\n  return SceneManager.instance || null;\n};\nexport default function (container) {\n  if (!SceneManager.instance) {\n    SceneManager.instance = new SceneManager(container);\n  }\n\n  return SceneManager.instance;\n}","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/group21WildLifeRefuge/src/scenes/SceneManager.js"],"names":["THREE","OrbitControls","Ground","GrassField","AmbientLight","DirectionalLight","getValue","Hawk","NAME","hawkName","getCapiInstance","FlyControls","SceneManager","canvas","groundSize","x","y","camera","scene","renderer","cameraControls","raycaster","Raycaster","mouse","Vector2","clock","Clock","screenDimensions","subjects","selected","intersected","defaultCameraPosition","checkIntersects","intersects","intersectObjects","children","length","object","resetIntersectedColor","selectable","highlight","color","set","handleClick","event","vector","convertClickToVector","position","model","isSelectable","toggleSelected","Vector3","canvasTopOffset","getBoundingClientRect","top","clientX","width","clientY","height","unproject","sub","normalize","onDocumentMouseClick","onDocumentMouseMove","setCanvas","initializeScene","initializeRenderer","initializeCamera","createSceneSubjects","reset","modelIndex","findIndex","selectedModel","modelToRemove","originalColor","capi","currentHawkCount","key","setValue","value","splice","selectedColor","name","push","delta","getDelta","elapsedTime","getElapsedTime","i","update","render","selectableKey","isSelected","colorKey","size","count","sceneObject","hawkCount","hawks","addObject","setSize","aspect","updateProjectionMatrix","fieldOfView","aspectRatio","nearPlane","farPlane","PerspectiveCamera","z","lookAt","movementSpeed","domElement","document","querySelector","maxPolarAngle","Math","PI","rollSpeed","autoForward","dragToLook","Scene","background","Color","WebGLRenderer","antialias","setPixelRatio","getSceneManager","instance","container"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { OrbitControls } from \"../js/three/OrbitControls\";\nimport Ground from \"./Ground\";\nimport GrassField from \"./GrassField\";\nimport AmbientLight from \"./AmbientLight\";\nimport DirectionalLight from \"./DirectionalLight\";\nimport { getValue } from \"../utils/helpers\";\nimport Hawk, { NAME as hawkName } from \"./Hawk\";\nimport { getCapiInstance } from \"../utils/CAPI/capi\";\nimport { FlyControls } from \"../js/three/FlyControls\";\n\nclass SceneManager {\n  groundSize = {\n    x: 1000,\n    y: 1000\n  }\n  camera = null\n  scene = null\n  renderer = null\n  cameraControls = null\n  raycaster = new THREE.Raycaster()\n  mouse = new THREE.Vector2()\n  clock = new THREE.Clock()\n  screenDimensions = {}\n  subjects = []\n  selected = []\n  intersected = null\n  defaultCameraPosition = [-75, 40, 80]\n\n  constructor (canvas) {\n    this.setCanvas(canvas);\n    this.initializeScene();\n    this.initializeRenderer();\n    this.initializeCamera();\n\n    this.createSceneSubjects();\n  }\n\n  setCanvas (canvas) {\n    const { width, height } = canvas;\n    this.canvas = canvas;\n    this.screenDimensions = { width, height };\n  }\n\n  resetCamera () {\n    this.cameraControls.reset();\n  }\n\n  toggleSelected (model) {\n    const modelIndex = this.selected.findIndex(\n      selectedModel => model === selectedModel\n    );\n\n    if (modelIndex >= 0) {\n      const modelToRemove = this.selected[modelIndex];\n      const originalColor = getValue(\"userData.color.original\", modelToRemove);\n\n      const color = getValue(\"material.color\", modelToRemove);\n      color.set && color.set(originalColor);\n      if (getValue(\"userData.name\") === hawkName) {\n        const capi = getCapiInstance();\n        const currentHawkCount = capi.getValue({ key: \"redtailHawkSelected\" });\n        capi.setValue({\n          key: \"redtailHawkSelected\",\n          value: currentHawkCount - 1\n        });\n      }\n      this.selected.splice(modelIndex, 1);\n    } else {\n      const color = getValue(\"material.color\", model);\n      const selectedColor = getValue(\"userData.color.selected\", model);\n      const name = getValue(\"userData.name\", model);\n      color.set && color.set(selectedColor);\n      if (name === hawkName) {\n        const capi = getCapiInstance();\n        const currentHawkCount = capi.getValue({ key: \"redtailHawkSelected\" });\n        capi.setValue({\n          key: \"redtailHawkSelected\",\n          value: currentHawkCount + 1\n        });\n      }\n      this.selected.push(model);\n    }\n  }\n\n  update () {\n    const delta = this.clock.getDelta();\n    const elapsedTime = this.clock.getElapsedTime();\n    for (let i = 0; i < this.subjects.length; i++) {\n      this.subjects[i].update && this.subjects[i].update(elapsedTime);\n    }\n\n    this.cameraControls.update(delta);\n    this.renderer.render(this.scene, this.camera);\n    this.checkIntersects();\n  }\n\n  checkIntersects = () => {\n    const intersects =\n      this.raycaster.intersectObjects(this.scene.children, true) || [];\n\n    if (intersects.length > 0) {\n      if (this.intersected !== intersects[0].object) {\n        this.resetIntersectedColor(this.intersected);\n        this.intersected = getValue(\"object\", intersects[0]);\n\n        const selectable = getValue(\"userData.selectable\", this.intersected);\n        if (selectable) {\n          const highlight = getValue(\n            \"userData.color.highlight\",\n            this.intersected\n          );\n          const color = getValue(\"material.color\", this.intersected);\n          color.set && color.set(highlight);\n        }\n      }\n    } else {\n      this.resetIntersectedColor(this.intersected);\n      this.intersected = null;\n    }\n  }\n\n  resetIntersectedColor (intersected) {\n    const selectableKey = \"userData.selectable\";\n    if (intersected && getValue(selectableKey, intersected)) {\n      const color = getValue(\"material.color\", intersected);\n      const isSelected =\n        this.selected.findIndex(model => model === intersected) >= 0;\n\n      if (color.set) {\n        const colorKey = `userData.color.${\n          isSelected ? \"selected\" : \"original\"\n        }`;\n        color.set(getValue(colorKey, intersected));\n      }\n    }\n  }\n\n  createSceneSubjects () {\n    this.subjects = [\n      new Ground(this.scene, { size: this.groundSize, color: \"#996600\" }),\n      new GrassField(this.scene, { count: 500 }),\n      new AmbientLight(this.scene),\n      new DirectionalLight(this.scene)\n    ];\n  }\n\n  addObject (sceneObject) {\n    this.subjects.push(sceneObject);\n  }\n\n  onTransporterReady () {\n    const capi = getCapiInstance();\n    const hawkCount = capi.getValue({ key: \"redtailHawkCount\" });\n\n    for (let hawks = 0; hawks < hawkCount; hawks++) {\n      this.addObject(new Hawk(this.scene));\n    }\n  }\n\n  onWindowResize () {\n    const { width, height } = this.canvas;\n\n    this.screenDimensions.width = width;\n    this.screenDimensions.height = height;\n\n    this.renderer.setSize(width, height);\n\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(width, height);\n  }\n\n  handleClick = event => {\n    const vector = this.convertClickToVector(event);\n    this.raycaster.set(this.camera.position, vector);\n    const intersects =\n      this.raycaster.intersectObjects(this.scene.children, true) || [];\n\n    const model = intersects[0] || {};\n    const isSelectable = !!getValue(\"object.userData.selectable\", model);\n\n    if (isSelectable) {\n      this.toggleSelected(model.object);\n    }\n  }\n\n  convertClickToVector = event => {\n    const vector = new THREE.Vector3();\n    const canvasTopOffset = this.canvas.getBoundingClientRect().top;\n    vector.x = (event.clientX / this.canvas.width) * 2 - 1;\n    vector.y = (-(event.clientY - canvasTopOffset) / this.canvas.height) * 2 + 1;\n\n    vector.unproject(this.camera);\n    vector.sub(this.camera.position);\n    vector.normalize();\n    return vector;\n  }\n\n  onDocumentMouseClick = event => {\n    this.handleClick(event);\n  }\n\n  onDocumentMouseMove = event => {\n    const vector = this.convertClickToVector(event);\n    this.raycaster.set(this.camera.position, vector);\n  }\n\n  initializeCamera () {\n    const { width, height } = this.screenDimensions;\n    const fieldOfView = 60;\n    const aspectRatio = width / height;\n    const nearPlane = 1;\n    const farPlane = 1000;\n\n    this.camera = new THREE.PerspectiveCamera(\n      fieldOfView,\n      aspectRatio,\n      nearPlane,\n      farPlane\n    );\n\n    this.camera.position.set(...this.defaultCameraPosition);\n\n    this.cameraControls = new OrbitControls(this.camera);\n  }\n\n  setFlyControlCamera () {\n    // position and point the camera to the center of the scene\n    this.camera.position.x = 100;\n    this.camera.position.y = 100;\n    this.camera.position.z = 300;\n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n\n    this.cameraControls = new FlyControls(this.camera);\n\n    this.cameraControls.movementSpeed = 25;\n    this.cameraControls.domElement = document.querySelector(\"#root\");\n    this.cameraControls.maxPolarAngle = Math.PI * 0.5;\n    this.cameraControls.rollSpeed = Math.PI / 24;\n    this.cameraControls.autoForward = true;\n    this.cameraControls.dragToLook = true;\n  }\n\n  setCameraPosition (x, y, z) {\n    this.cameraControls = new OrbitControls(this.camera);\n\n    this.camera.position.x = x;\n    this.camera.position.y = y;\n    this.camera.position.z = z;\n  }\n\n  setDefaultCamera () {\n    this.camera.position.set(...this.defaultCameraPosition);\n  }\n\n  initializeScene () {\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(\"#ffffff\");\n  }\n\n  initializeRenderer () {\n    const { width, height } = this.screenDimensions;\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: true\n    });\n    this.renderer.setPixelRatio(1);\n    this.renderer.setSize(width, height);\n  }\n}\n\nexport const getSceneManager = () => {\n  return SceneManager.instance || null;\n};\n\nexport default function (container) {\n  if (!SceneManager.instance) {\n    SceneManager.instance = new SceneManager(container);\n  }\n  return SceneManager.instance;\n}\n"]},"metadata":{},"sourceType":"module"}