{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { Component } from 'react';\nimport LoadingModels from \"../components/LoadingModels\";\nimport { getStudentView } from \"../components/StudentView\";\nimport { random } from \"../utils/helpers\";\nimport { getSceneManager } from \"./SceneManager\";\n\nvar THREE = window.THREE = require(\"three\");\n\nrequire(\"three/examples/js/loaders/GLTFLoader\");\n\nfunction Loader() {\n  return _Loader.apply(this, arguments);\n}\n\nfunction _Loader() {\n  _Loader = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var manager, isLoading, loader, _config, count, grasses, originalGrass, update;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            update = function _ref() {};\n\n            manager = new THREE.LoadingManager();\n            isLoading = true;\n\n            manager.onStart = function () {\n              console.log(\"Start Loading\");\n              var studentView = getStudentView();\n              studentView.whileLoading();\n            };\n\n            manager.onLoad = function () {\n              console.log(\"Done Loading\");\n              isLoading = false;\n              var studentView = getStudentView();\n              studentView.whileNotLoading();\n            };\n\n            loader = new THREE.GLTFLoader(manager);\n            _config = config, count = _config.count;\n            grasses = new THREE.Object3D();\n            _context.next = 10;\n            return new Promise(function (resolve, reject) {\n              loader.load(\"models/grass.gltf\", function (grass) {\n                return resolve(grass.scene || null);\n              }, undefined, reject);\n            });\n\n          case 10:\n            originalGrass = _context.sent;\n            return _context.abrupt(\"return\", {\n              update: update\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _Loader.apply(this, arguments);\n}\n\nexport var getLoader = function getLoader() {\n  return Loader.instance || null;\n};\nexport default function (container) {\n  if (!Loader.instance) {\n    Loader.instance = new Loader(container);\n  }\n\n  return Loader.instance;\n}","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/group21WildLifeRefuge/src/scenes/Loader.js"],"names":["React","Component","LoadingModels","getStudentView","random","getSceneManager","THREE","window","require","Loader","update","manager","LoadingManager","isLoading","onStart","console","log","studentView","whileLoading","onLoad","whileNotLoading","loader","GLTFLoader","config","count","grasses","Object3D","Promise","resolve","reject","load","grass","scene","undefined","originalGrass","getLoader","instance","container"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAAQC,cAAR,QAA6B,2BAA7B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,eAAT,QAAgC,gBAAhC;;AACA,IAAMC,KAAK,GAAIC,MAAM,CAACD,KAAP,GAAeE,OAAO,CAAC,OAAD,CAArC;;AACAA,OAAO,CAAC,sCAAD,CAAP;;SAIeC,M;;;;;;;2BAAf;AAAA,4EAoCaC,MApCb;;AAAA;AAAA;AAAA;AAAA;AAoCaA,YAAAA,MApCb,mBAoCuB,CAAE,CApCzB;;AAKUC,YAAAA,OALV,GAKoB,IAAIL,KAAK,CAACM,cAAV,EALpB;AAMQC,YAAAA,SANR,GAMoB,IANpB;;AAOIF,YAAAA,OAAO,CAACG,OAAR,GAAgB,YAAI;AAEhBC,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,kBAAMC,WAAW,GAAGd,cAAc,EAAlC;AACAc,cAAAA,WAAW,CAACC,YAAZ;AAEH,aAND;;AAOAP,YAAAA,OAAO,CAACQ,MAAR,GAAe,YAAI;AAEfJ,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAH,cAAAA,SAAS,GAAG,KAAZ;AACA,kBAAMI,WAAW,GAAGd,cAAc,EAAlC;AACAc,cAAAA,WAAW,CAACG,eAAZ;AAGH,aARD;;AASMC,YAAAA,MAvBV,GAuBmB,IAAIf,KAAK,CAACgB,UAAV,CAAqBX,OAArB,CAvBnB;AAAA,sBAwBsBY,MAxBtB,EAwBYC,KAxBZ,WAwBYA,KAxBZ;AA0BUC,YAAAA,OA1BV,GA0BoB,IAAInB,KAAK,CAACoB,QAAV,EA1BpB;AAAA;AAAA,mBA2BgC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACzDR,cAAAA,MAAM,CAACS,IAAP,CACI,mBADJ,EAEI,UAAAC,KAAK;AAAA,uBAAIH,OAAO,CAACG,KAAK,CAACC,KAAN,IAAe,IAAhB,CAAX;AAAA,eAFT,EAGIC,SAHJ,EAIIJ,MAJJ;AAMH,aAP2B,CA3BhC;;AAAA;AA2BUK,YAAAA,aA3BV;AAAA,6CAsCW;AACHxB,cAAAA,MAAM,EAANA;AADG,aAtCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0CA,OAAO,IAAMyB,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC3B,SAAO1B,MAAM,CAAC2B,QAAP,IAAmB,IAA1B;AACH,CAFM;AAIP,eAAe,UAAUC,SAAV,EAAqB;AAChC,MAAI,CAAC5B,MAAM,CAAC2B,QAAZ,EAAsB;AAClB3B,IAAAA,MAAM,CAAC2B,QAAP,GAAkB,IAAI3B,MAAJ,CAAW4B,SAAX,CAAlB;AACH;;AACD,SAAO5B,MAAM,CAAC2B,QAAd;AACH","sourcesContent":["import React, { Component}  from 'react';\nimport LoadingModels from \"../components/LoadingModels\";\nimport {getStudentView} from \"../components/StudentView\";\nimport { random } from \"../utils/helpers\";\nimport { getSceneManager } from \"./SceneManager\";\nconst THREE = (window.THREE = require(\"three\"));\nrequire(\"three/examples/js/loaders/GLTFLoader\");\n\n\n\nasync function Loader () {\n\n\n\n\n    const manager = new THREE.LoadingManager();\n    var isLoading = true;\n    manager.onStart=()=>{\n\n        console.log(\"Start Loading\");\n        const studentView = getStudentView();\n        studentView.whileLoading();\n\n    }\n    manager.onLoad=()=>{\n\n        console.log(\"Done Loading\");\n        isLoading = false;\n        const studentView = getStudentView();\n        studentView.whileNotLoading();\n\n\n    }\n    const loader = new THREE.GLTFLoader(manager);\n    const { count } = config;\n\n    const grasses = new THREE.Object3D();\n    const originalGrass = await new Promise((resolve, reject) => {\n        loader.load(\n            \"models/grass.gltf\",\n            grass => resolve(grass.scene || null),\n            undefined,\n            reject\n        );\n    });\n\n    function update () {}\n\n    return {\n        update\n    };\n}\nexport const getLoader = () => {\n    return Loader.instance || null;\n};\n\nexport default function (container) {\n    if (!Loader.instance) {\n        Loader.instance = new Loader(container);\n    }\n    return Loader.instance;\n}\n\n"]},"metadata":{},"sourceType":"module"}