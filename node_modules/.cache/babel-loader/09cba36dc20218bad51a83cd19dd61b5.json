{"ast":null,"code":"import _defineProperty from \"/Users/maxwellheller/School/SER401/spr-capi-test/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/maxwellheller/School/SER401/spr-capi-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maxwellheller/School/SER401/spr-capi-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maxwellheller/School/SER401/spr-capi-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maxwellheller/School/SER401/spr-capi-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maxwellheller/School/SER401/spr-capi-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/maxwellheller/School/SER401/spr-capi-test/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/maxwellheller/School/SER401/spr-capi-test/src/App.js\";\nimport React, { Component } from 'react';\nimport './css/App.css';\nimport model from './model/capiModel';\nimport StudentView from './components/StudentView';\nimport AuthorView from \"./components/AuthorView\";\nimport WesternRedCedar from './js/westernRedCedarTree';\nimport RedTailedHawk from \"./js/redTailedHawk\";\nimport SnowshoeHare from \"./js/snowshoeHare\";\nimport BigSagebrush from \"./js/bigSageBrush\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = JSON.parse(JSON.stringify(model));\n    _this.simModel = new window.simcapi.CapiAdapter.CapiModel(_this.state);\n\n    for (var key in _this.state) {\n      if (!_this.state.hasOwnProperty(key)) continue;\n\n      _this.addListener(key);\n\n      window.simcapi.CapiAdapter.expose(key, _this.simModel);\n    }\n\n    window.simcapi.CapiAdapter.unexpose('simObjects', _this.simModel);\n    window.simcapi.Transporter.notifyOnReady();\n    _this.increment = _this.increment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"addListener\",\n    value: function addListener(keyName) {\n      var _this2 = this;\n\n      this.simModel.on('change:' + keyName, function () {\n        _this2.setState(_defineProperty({}, keyName, _this2.simModel.get(keyName)));\n      });\n    }\n  }, {\n    key: \"addSimulationElement\",\n    value: function addSimulationElement(element) {\n      switch (element) {\n        case 'redCedar':\n          //TODO: Randomize Object parameters\n          var tree = new WesternRedCedar('medium', Math.floor(Math.random() * 12), Math.random() >= 0.5);\n          this.state.simObjects.push(tree);\n          break;\n\n        case 'redHawk':\n          //TODO: Randomize Object parameters\n          var hawk = new RedTailedHawk();\n          this.state.simObjects.push(hawk);\n          break;\n\n        case 'snowHare':\n          //TODO: Randomize Object parameters\n          var snowHare = new SnowshoeHare();\n          this.state.simObjects.push(snowHare);\n          break;\n\n        case 'bigSage':\n          //TODO: Randomize Object parameters\n          var sageBrush = new BigSagebrush();\n          this.state.simObjects.push(sageBrush);\n          break;\n\n        case 'blueGrass':\n          //TODO: Add creation of Blue Bunch Wheatgrass Objects\n          //TODO: Randomize Object parameters\n          break;\n\n        default:\n          console.log('Unknown simulation element: ' + element);\n      }\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(objectName) {\n      var count = this.simModel.get(objectName);\n      this.simModel.set(objectName, count + 1);\n      this.addSimulationElement(objectName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //TODO: Add state checking using -> simcapi.Transporter.getConfig().context\n      var display = null;\n\n      if (this.state.studentMode) {\n        display = React.createElement(StudentView, {\n          increment: this.increment,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        });\n      } else if (this.state.authorMode) {\n        display = React.createElement(AuthorView, {\n          style: {\n            backgroundColor: 'beige'\n          },\n          state: this.state,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      }\n\n      return display;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/maxwellheller/School/SER401/spr-capi-test/src/App.js"],"names":["React","Component","model","StudentView","AuthorView","WesternRedCedar","RedTailedHawk","SnowshoeHare","BigSagebrush","App","props","state","JSON","parse","stringify","simModel","window","simcapi","CapiAdapter","CapiModel","key","hasOwnProperty","addListener","expose","unexpose","Transporter","notifyOnReady","increment","bind","keyName","on","setState","get","element","tree","Math","floor","random","simObjects","push","hawk","snowHare","sageBrush","console","log","objectName","count","set","addSimulationElement","display","studentMode","authorMode","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './css/App.css'\nimport model from './model/capiModel'\nimport StudentView from './components/StudentView'\nimport AuthorView from \"./components/AuthorView\";\nimport WesternRedCedar from './js/westernRedCedarTree'\nimport RedTailedHawk from \"./js/redTailedHawk\";\nimport SnowshoeHare from \"./js/snowshoeHare\";\nimport BigSagebrush from \"./js/bigSageBrush\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = JSON.parse(JSON.stringify(model));\n\n        this.simModel = new window.simcapi.CapiAdapter.CapiModel(this.state);\n\n        for (var key in this.state) {\n            if (!this.state.hasOwnProperty(key)) continue;\n            this.addListener(key);\n            window.simcapi.CapiAdapter.expose(key, this.simModel);\n        }\n\n        window.simcapi.CapiAdapter.unexpose('simObjects', this.simModel);\n\n        window.simcapi.Transporter.notifyOnReady();\n\n        this.increment = this.increment.bind(this)\n\n\n    }\n\n\n    addListener(keyName) {\n        this.simModel.on( ('change:' + keyName), () => {\n            this.setState(\n                {\n                    [keyName]: this.simModel.get(keyName)\n                });\n        });\n    }\n\n    addSimulationElement(element) {\n        switch (element) {\n            case 'redCedar':\n                //TODO: Randomize Object parameters\n                var tree = new WesternRedCedar('medium', Math.floor(Math.random() * 12), (Math.random() >= 0.5));\n                this.state.simObjects.push(tree);\n                break;\n            case 'redHawk':\n                //TODO: Randomize Object parameters\n                var hawk = new RedTailedHawk();\n                this.state.simObjects.push(hawk);\n                break;\n            case 'snowHare':\n                //TODO: Randomize Object parameters\n                var snowHare = new SnowshoeHare();\n                this.state.simObjects.push(snowHare);\n                break;\n            case 'bigSage':\n                //TODO: Randomize Object parameters\n                var sageBrush = new BigSagebrush();\n                this.state.simObjects.push(sageBrush);\n                break;\n            case 'blueGrass':\n                //TODO: Add creation of Blue Bunch Wheatgrass Objects\n                //TODO: Randomize Object parameters\n                break;\n            default:\n                console.log('Unknown simulation element: ' + element)\n        }\n    }\n\n    increment(objectName) {\n        var count = this.simModel.get(objectName);\n        this.simModel.set(objectName, count + 1);\n\n        this.addSimulationElement(objectName)\n    }\n\n\n    render() {\n\n        //TODO: Add state checking using -> simcapi.Transporter.getConfig().context\n        var display = null;\n\n        if (this.state.studentMode){\n            display = <StudentView increment={this.increment}/>\n        } else if (this.state.authorMode) {\n            display = <AuthorView style={{backgroundColor: 'beige'}} state={this.state}/>\n        }\n\n        return display;\n\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}