{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { Component } from 'react';\nimport LoadingModels from \"../components/LoadingModels\";\nimport { getStudentView } from \"../components/StudentView\";\nimport { random } from \"../utils/helpers\";\nimport { getSceneManager } from \"./SceneManager\";\n\nvar THREE = window.THREE = require(\"three\");\n\nrequire(\"three/examples/js/loaders/GLTFLoader\");\n\nfunction GrassField(_x) {\n  return _GrassField.apply(this, arguments);\n}\n\nfunction _GrassField() {\n  _GrassField = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(scene) {\n    var config,\n        manager,\n        isLoading,\n        loader,\n        count,\n        grasses,\n        originalGrass,\n        bounds,\n        i,\n        grass,\n        size,\n        x,\n        z,\n        rotation,\n        grassMesh,\n        update,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            update = function _ref() {};\n\n            config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {\n              count: 500\n            };\n            manager = new THREE.LoadingManager();\n            isLoading = true;\n\n            manager.onStart = function () {\n              console.log(\"Start Loading\");\n              var studentView = getStudentView();\n              studentView.whileLoading();\n            };\n\n            manager.onLoad = function () {\n              console.log(\"Done Loading\");\n              isLoading = false;\n              var studentView = getStudentView();\n              studentView.whileNotLoading();\n            };\n\n            loader = new THREE.GLTFLoader(manager);\n            count = config.count;\n            grasses = new THREE.Object3D();\n            _context.next = 11;\n            return new Promise(function (resolve, reject) {\n              loader.load(\"models/grass.gltf\", function (grass) {\n                return resolve(grass.scene || null);\n              }, undefined, reject);\n            });\n\n          case 11:\n            originalGrass = _context.sent;\n            bounds = getSceneManager().groundSize;\n            bounds.x *= 0.95;\n            bounds.y *= 0.95;\n\n            for (i = 0; i < count; i++) {\n              grass = originalGrass.clone();\n              grass.children[0].children[0].userData = {\n                selectable: true,\n                color: {\n                  highlight: \"#FFF\",\n                  original: \"#3baa5d\",\n                  selected: \"#FF00FF\"\n                }\n              };\n              size = random(1, 2);\n              x = random(-bounds.x / 2, bounds.x / 2);\n              z = random(-bounds.y / 2, bounds.y / 2);\n              rotation = random(-Math.PI / 2, Math.PI / 2);\n              grass.scale.set(size, size, size);\n              grass.position.set(x, 0, z);\n              grass.rotation.y = rotation;\n              grassMesh = grass.children[0].children[0].material;\n              grassMesh.color.set(grass.children[0].children[0].userData.color.original);\n              grass.children[0].children[0].material = grassMesh.clone();\n              grasses.add(grass);\n            }\n\n            grasses.type = \"Grass\";\n            scene.add(grasses);\n            return _context.abrupt(\"return\", {\n              update: update\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _GrassField.apply(this, arguments);\n}\n\nexport default GrassField;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/group21WildLifeRefuge/src/scenes/GrassField.js"],"names":["React","Component","LoadingModels","getStudentView","random","getSceneManager","THREE","window","require","GrassField","scene","update","config","count","manager","LoadingManager","isLoading","onStart","console","log","studentView","whileLoading","onLoad","whileNotLoading","loader","GLTFLoader","grasses","Object3D","Promise","resolve","reject","load","grass","undefined","originalGrass","bounds","groundSize","x","y","i","clone","children","userData","selectable","color","highlight","original","selected","size","z","rotation","Math","PI","scale","set","position","grassMesh","material","add","type"],"mappings":"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","sourcesContent":["import React, { Component}  from 'react';\nimport LoadingModels from \"../components/LoadingModels\";\nimport {getStudentView} from \"../components/StudentView\";\nimport { random } from \"../utils/helpers\";\nimport { getSceneManager } from \"./SceneManager\";\nconst THREE = (window.THREE = require(\"three\"));\nrequire(\"three/examples/js/loaders/GLTFLoader\");\n\n\n\nasync function GrassField (scene, config = { count: 500 }) {\n\n\n\n\n  const manager = new THREE.LoadingManager();\n  var isLoading = true;\n  manager.onStart=()=>{\n\n    console.log(\"Start Loading\");\n   const studentView = getStudentView();\n   studentView.whileLoading();\n\n  }\n  manager.onLoad=()=>{\n\n    console.log(\"Done Loading\");\n    isLoading = false;\n    const studentView = getStudentView();\n    studentView.whileNotLoading();\n\n\n  }\n  const loader = new THREE.GLTFLoader(manager);\n  const { count } = config;\n\n  const grasses = new THREE.Object3D();\n  const originalGrass = await new Promise((resolve, reject) => {\n    loader.load(\n      \"models/grass.gltf\",\n      grass => resolve(grass.scene || null),\n      undefined,\n      reject\n    );\n  });\n  const bounds = getSceneManager().groundSize;\n  bounds.x *= 0.95;\n  bounds.y *= 0.95;\n\n  for (let i = 0; i < count; i++) {\n    const grass = originalGrass.clone();\n    grass.children[0].children[0].userData = {\n      selectable: true,\n      color: {\n        highlight: \"#FFF\",\n        original: \"#3baa5d\",\n        selected: \"#FF00FF\"\n      }\n    };\n    const size = random(1, 2);\n\n    const x = random(-bounds.x / 2, bounds.x / 2);\n    const z = random(-bounds.y / 2, bounds.y / 2);\n\n    const rotation = random(-Math.PI / 2, Math.PI / 2);\n\n    grass.scale.set(size, size, size);\n    grass.position.set(x, 0, z);\n    grass.rotation.y = rotation;\n    const grassMesh = grass.children[0].children[0].material;\n    grassMesh.color.set(grass.children[0].children[0].userData.color.original);\n    grass.children[0].children[0].material = grassMesh.clone();\n    grasses.add(grass);\n  }\n\n  grasses.type = \"Grass\";\n\n  scene.add(grasses);\n\n  function update () {}\n\n  return {\n    update\n  };\n}\n\nexport default GrassField;\n"]},"metadata":{},"sourceType":"module"}