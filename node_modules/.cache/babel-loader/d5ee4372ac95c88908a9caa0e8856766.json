{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/admin/Documents/GitHub/group21WildLifeRefuge/src/components/LoadingModels.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  background: papayawhip;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport React, { Component } from \"react\";\nimport \"../css/simulation.css\";\nimport SimViewer from \"./SimViewer\";\nimport ViewControl from \"./ViewControl\";\nimport UIBar from \"./UI/UIBar\";\nimport back from \"../assets/back.png\";\nimport forward from \"../assets/forward.png\";\nimport reset from \"../assets/reset.png\";\nimport help from \"../assets/help.png\";\nimport styled from \"styled-components\";\nimport ImgButton from \"./UI/ImgButton\";\nimport ResetButton from \"./UI/ResetButton\";\nimport BalancePopulation from \"./BalancePopulation\";\nimport Loader from \"../scenes/Loader\";\nimport GrassField from \"../scenes/GrassField\";\nimport { getStudentView } from \"./StudentView\";\n\nvar THREE = window.THREE = require(\"three\");\n\nrequire(\"three/examples/js/loaders/GLTFLoader\");\n\nvar Container = styled.div(_templateObject());\n\nvar LoadingModels =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoadingModels, _Component);\n\n  function LoadingModels(props) {\n    var _this;\n\n    _classCallCheck(this, LoadingModels);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoadingModels).call(this, props));\n    _this.state = {\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(LoadingModels, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var load, manager, isLoading, loader, grasses, originalGrass;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                load = React.createElement(Loader, {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 48\n                  },\n                  __self: this\n                });\n                console.log(\"Called  did mount\");\n                manager = new THREE.LoadingManager();\n                isLoading = true;\n\n                manager.onStart = function () {\n                  console.log(\"Start Loading\"); //const studentView = getStudentView();\n                  //studentView.whileLoading();\n                };\n\n                manager.onLoad = function () {\n                  console.log(\"Done Loading\");\n                  isLoading = false; // const studentView = getStudentView();\n                  // studentView.whileNotLoading();\n                };\n\n                loader = new THREE.GLTFLoader(manager);\n                grasses = new THREE.Object3D();\n                _context.next = 10;\n                return new Promise(function (resolve, reject) {\n                  loader.load(\"models/grass.gltf\", function (grass) {\n                    return resolve(grass.scene || null);\n                  }, undefined, reject);\n                });\n\n              case 10:\n                originalGrass = _context.sent;\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.state.loading;\n\n      if (loading == false) {\n        return React.createElement(CircularProgress, {\n          disableShrink: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \" Hello loader!!!\");\n    }\n  }]);\n\n  return LoadingModels;\n}(Component);\n\nexport default LoadingModels;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/group21WildLifeRefuge/src/components/LoadingModels.js"],"names":["CircularProgress","React","Component","SimViewer","ViewControl","UIBar","back","forward","reset","help","styled","ImgButton","ResetButton","BalancePopulation","Loader","GrassField","getStudentView","THREE","window","require","Container","div","LoadingModels","props","state","loading","load","console","log","manager","LoadingManager","isLoading","onStart","onLoad","loader","GLTFLoader","grasses","Object3D","Promise","resolve","reject","grass","scene","undefined","originalGrass"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,OAAOA,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,uBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAGA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAAQC,cAAR,QAA6B,eAA7B;;AACA,IAAMC,KAAK,GAAIC,MAAM,CAACD,KAAP,GAAeE,OAAO,CAAC,OAAD,CAArC;;AACAA,OAAO,CAAC,sCAAD,CAAP;;AAGA,IAAMC,SAAS,GAAGV,MAAM,CAACW,GAAV,mBAAf;;IAYMC,a;;;;;AACF,yBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,uFAAMA,KAAN;AAIA,UAAKC,KAAL,GAAY;AACRC,MAAAA,OAAO,EAAE;AADD,KAAZ;AALc;AAQjB;;;;;;;;;;;;;AAESC,gBAAAA,I,GAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kB;AACbC,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACMC,gBAAAA,O,GAAU,IAAIZ,KAAK,CAACa,cAAV,E;AACZC,gBAAAA,S,GAAY,I;;AAChBF,gBAAAA,OAAO,CAACG,OAAR,GAAkB,YAAM;AAEpBL,kBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAFoB,CAGpB;AACA;AAEH,iBAND;;AAOAC,gBAAAA,OAAO,CAACI,MAAR,GAAiB,YAAM;AAEnBN,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAG,kBAAAA,SAAS,GAAG,KAAZ,CAHmB,CAIpB;AACA;AAGF,iBARD;;AASMG,gBAAAA,M,GAAS,IAAIjB,KAAK,CAACkB,UAAV,CAAqBN,OAArB,C;AAGTO,gBAAAA,O,GAAU,IAAInB,KAAK,CAACoB,QAAV,E;;uBACY,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACzDN,kBAAAA,MAAM,CAACR,IAAP,CACI,mBADJ,EAEI,UAAAe,KAAK;AAAA,2BAAIF,OAAO,CAACE,KAAK,CAACC,KAAN,IAAe,IAAhB,CAAX;AAAA,mBAFT,EAGIC,SAHJ,EAIIH,MAJJ;AAMH,iBAP2B,C;;;AAAtBI,gBAAAA,a;;;;;;;;;;;;;;;;;;2CAYa,CACtB;;;6BAGO;AAAA,UACGnB,OADH,GACc,KAAKD,KADnB,CACGC,OADH;;AAGJ,UAAGA,OAAO,IAAI,KAAd,EACA;AACI,eAAO,oBAAC,gBAAD;AAAkB,UAAA,aAAa,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AACD,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AAGH;;;;EA7DuBvB,S;;AAkE5B,eAAeoB,aAAf","sourcesContent":["\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport React, { Component } from \"react\";\nimport \"../css/simulation.css\";\nimport SimViewer from \"./SimViewer\";\nimport ViewControl from \"./ViewControl\";\nimport UIBar from \"./UI/UIBar\";\nimport back from \"../assets/back.png\";\nimport forward from \"../assets/forward.png\";\nimport reset from \"../assets/reset.png\";\nimport help from \"../assets/help.png\";\nimport styled from \"styled-components\";\nimport ImgButton from \"./UI/ImgButton\";\nimport ResetButton from \"./UI/ResetButton\";\nimport BalancePopulation from \"./BalancePopulation\";\nimport Loader from \"../scenes/Loader\";\n\n\nimport GrassField from \"../scenes/GrassField\";\nimport {getStudentView} from \"./StudentView\";\nconst THREE = (window.THREE = require(\"three\"));\nrequire(\"three/examples/js/loaders/GLTFLoader\");\n\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background: papayawhip;\n`;\n\n\nclass LoadingModels extends Component{\n    constructor(props){\n        super(props)\n\n\n\n        this.state ={\n            loading: false\n        }\n    }\n    async componentDidMount() {\n        const load = <Loader/>;\n        console.log(\"Called  did mount\");\n        const manager = new THREE.LoadingManager();\n        var isLoading = true;\n        manager.onStart = () => {\n\n            console.log(\"Start Loading\");\n            //const studentView = getStudentView();\n            //studentView.whileLoading();\n\n        }\n        manager.onLoad = () => {\n\n            console.log(\"Done Loading\");\n            isLoading = false;\n           // const studentView = getStudentView();\n           // studentView.whileNotLoading();\n\n\n        }\n        const loader = new THREE.GLTFLoader(manager);\n\n\n        const grasses = new THREE.Object3D();\n        const originalGrass = await new Promise((resolve, reject) => {\n            loader.load(\n                \"models/grass.gltf\",\n                grass => resolve(grass.scene || null),\n                undefined,\n                reject\n            );\n        });\n\n\n    }\n\n    componentWillUnmount() {\n    }\n\n\n    render(){\n        const {loading} = this.state;\n\n        if(loading == false)\n        {\n            return <CircularProgress disableShrink />;\n        }\n        return <div> Hello loader!!!</div>\n\n\n    }\n\n\n}\n\nexport default LoadingModels;"]},"metadata":{},"sourceType":"module"}